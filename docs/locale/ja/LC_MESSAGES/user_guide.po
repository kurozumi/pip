# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016, PyPA
# This file is distributed under the same license as the pip package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pip 9.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-14 15:40+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../user_guide.rst:3
msgid "User Guide"
msgstr ""
"ユーザーガイド"

#: ../../user_guide.rst
msgid "Contents"
msgstr ""
"コンテンツ"

#: ../../user_guide.rst:8
msgid "Installing Packages"
msgstr ""
"パッケージのインストール"

#: ../../user_guide.rst:10
msgid ""
"pip supports installing from `PyPI`_, version control, local projects, "
"and directly from distribution files."
msgstr ""
"pipは `PyPI`_ からのインストール、バージョン管理からのインストール、"
"ローカルプロジェクトからインストール、配布ファイルからのインストールをサポートしています。"

#: ../../user_guide.rst:14
msgid ""
"The most common scenario is to install from `PyPI`_ using "
":ref:`Requirement Specifiers`"
msgstr ""
"最も一般的なシナリオは、`PyPI`_ から :ref:`Requirement Specifiers` を使用してインストールすることです。"

#: ../../user_guide.rst:24
msgid "For more information and examples, see the :ref:`pip install` reference."
msgstr ""
"詳細および例については、:ref:`pip install` のリファレンスを参照してください。"

#: ../../user_guide.rst:32
msgid "Requirements Files"
msgstr ""
"Requirementsファイル"

#: ../../user_guide.rst:34
msgid ""
"\"Requirements files\" are files containing a list of items to be "
"installed using :ref:`pip install` like so:"
msgstr ""
"\"Requirementsファイル\"は、:ref:`pip install` でインストールするためのパッケージリストが記載されているファイルです。"

#: ../../user_guide.rst:42
msgid ""
"Details on the format of the files are here: :ref:`Requirements File "
"Format`."
msgstr ""
"ファイル形式に関する詳細は、ここにあります: :ref:`Requirements File Format`"

#: ../../user_guide.rst:44
msgid ""
"Logically, a Requirements file is just a list of :ref:`pip install` "
"arguments placed in a file. Note that you should not rely on the items in"
" the file being installed by pip in any particular order."
msgstr ""
"論理的に言うと、Requirementsファイルはファイルに書かれた :ref:`pip install` 引数のリストに過ぎません。"
"特定の順序でpipによってインストールされているファイル内のパッケージに頼るべきではないことに注意してください。"

#: ../../user_guide.rst:48
msgid "In practice, there are 4 common uses of Requirements files:"
msgstr ""
"実際には、Requirementsファイルには4つの一般的な用途があります。"

#: ../../user_guide.rst:50
msgid ""
"Requirements files are used to hold the result from :ref:`pip freeze` for"
" the purpose of achieving :ref:`repeatable installations "
"<Repeatability>`.  In this case, your requirement file contains a pinned "
"version of everything that was installed when `pip freeze` was run."
msgstr ""
"Requirementsファイルは、:ref:`repeatable installations <Repeatability>` を実現するため、"
":ref:`pip freeze` からの結果を保持するために使用されます。"
"この場合、`pip freeze` が実行されたとき、requirementファイルには"
"インストールされたすべての固定バージョンのリストが記載されています。"


#: ../../user_guide.rst:60
msgid ""
"Requirements files are used to force pip to properly resolve "
"dependencies. As it is now, pip `doesn't have true dependency resolution "
"<https://github.com/pypa/pip/issues/988>`_, but instead simply uses the "
"first specification it finds for a project. E.g if `pkg1` requires "
"`pkg3>=1.0` and `pkg2` requires `pkg3>=1.0,<=2.0`, and if `pkg1` is "
"resolved first, pip will only use `pkg3>=1.0`, and could easily end up "
"installing a version of `pkg3` that conflicts with the needs of `pkg2`.  "
"To solve this problem, you can place `pkg3>=1.0,<=2.0` (i.e. the correct "
"specification) into your requirements file directly along with the other "
"top level requirements. Like so:"
msgstr ""
"Requirementsファイルは、依存関係を適切に解決させるためにpipを使用します。"
"pipは `正しい依存性解決方法を持っていません <https://github.com/pypa/pip/issues/988>`_ 。"
"代わりにシンプルにプロジェクトで見つけた最初の仕様を使用します。"
"例えば、`pkg1` は `pkg3>=1.0` が必要で、`pkg2` に `pkg3>=1.0,<=2.0` が必要で、"
"`pkg1` が最初に解決された場合、pipは `pkg3>=1.0` のみを使用し、　"
"`pkg2` で必要だけどコンフリクトする `pkg3` のバージョンをインストールします。"
"この問題を解決するには、`pkg3>=1.0,<=2.0` （つまり、正しい仕様）を"
"requirementsファイルに他の最上位要件とともに直接配置できます。:"

#: ../../user_guide.rst:77
msgid ""
"Requirements files are used to force pip to install an alternate version "
"of a sub-dependency.  For example, suppose `ProjectA` in your "
"requirements file requires `ProjectB`, but the latest version (v1.3) has "
"a bug, you can force pip to accept earlier versions like so:"
msgstr ""
"Requirementsファイルは、pipにサブ依存関係の代替バージョンをインストールさせるために使用されます。"
"たとえば、最新バージョン（v1.3）にバグがあるが `ProjectB` を必須とするRequirementsファイル内の"
"`ProjectA` を仮定した場合、pipに以前のバージョンのを受け入れるよう強制することができます。:"

#: ../../user_guide.rst:87
msgid ""
"Requirements files are used to override a dependency with a local patch "
"that lives in version control.  For example, suppose a dependency, "
"`SomeDependency` from PyPI has a bug, and you can't wait for an upstream "
"fix. You could clone/copy the src, make the fix, and place it in VCS with"
" the tag `sometag`.  You'd reference it in your requirements file with a "
"line like so:"
msgstr ""
"Requirementsファイルは、バージョン管理に存在するローカルパッチとの依存関係を上書きするために使用されます。"
"たとえば、依存関係、PyPIの `SomeDependency` にバグがあり、上流の修正を待つことができないとします。"
"ソースコードをクローン/コピーして修正を加え、いくつかのタグを付けてバージョン管理システムに配置することができます。"
"以下のようなコマンドでrequirementsファイルで参照したいと思います。:"

#: ../../user_guide.rst:97
msgid ""
"If `SomeDependency` was previously a top-level requirement in your "
"requirements file, then **replace** that line with the new line. If "
"`SomeDependency` is a sub-dependency, then **add** the new line."
msgstr ""
"前もって `SomeDependency` がrequirementファイルにトップレベルの要件であった場合は、"
"その行を新しい行に **置き換え** ます。"
"`SomeDependency` が従属依存である場合、新しい行を **追加** します。"

#: ../../user_guide.rst:102
msgid ""
"It's important to be clear that pip determines package dependencies using"
" `install_requires metadata "
"<https://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-"
"dependencies>`_, not by discovering `requirements.txt` files embedded in "
"projects."
msgstr ""
"pipは、プロジェクトに埋め込まれた `requirements.txt` ファイルを検出するのではなく、"
" `install_requires metadata <https://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-dependencies>`_ "
"を使用してパッケージの依存関係を判断することが重要です。"

#: ../../user_guide.rst:107
msgid "See also:"
msgstr ""
"こちらも参照下さい:"

#: ../../user_guide.rst:109
msgid ":ref:`Requirements File Format`"
msgstr ""

#: ../../user_guide.rst:110
msgid ":ref:`pip freeze`"
msgstr ""

#: ../../user_guide.rst:111
msgid ""
"`\"setup.py vs requirements.txt\" (an article by Donald Stufft) "
"<https://caremad.io/2013/07/setup-vs-requirement/>`_"
msgstr ""

#: ../../user_guide.rst:118
msgid "Constraints Files"
msgstr ""
"Constraintsファイル"

#: ../../user_guide.rst:120
msgid ""
"Constraints files are requirements files that only control which version "
"of a requirement is installed, not whether it is installed or not. Their "
"syntax and contents is nearly identical to :ref:`Requirements Files`. "
"There is one key difference: Including a package in a constraints file "
"does not trigger installation of the package."
msgstr ""
"Constraintsファイルは、インストールされているかどうかではなく、"
"インストールされている要件のバージョンのみを制御するrequirementsファイルです。"
"その構文と内容は :ref:`Requirements Files` とほぼ同じです。"
"重要な違いが1つあります:constraintsファイルにパッケージを組み込んでも、"
"パッケージのインストールが開始されません。"

#: ../../user_guide.rst:126
msgid "Use a constraints file like so:"
msgstr ""
"以下のように制約ファイルを使用して下さい:"

#: ../../user_guide.rst:132
msgid ""
"Constraints files are used for exactly the same reason as requirements "
"files when you don't know exactly what things you want to install. For "
"instance, say that the \"helloworld\" package doesn't work in your "
"environment, so you have a local patched version. Some things you install"
" depend on \"helloworld\", and some don't."
msgstr ""
"Constraintsファイルは、インストールするものが正確にわからないときに、"
"requirementsファイルとまったく同じ理由で使用されます。"
"例えば、あなたの環境では\"helloworld\"パッケージが動作しないので、"
"あなたはローカルパッチバージョンを持っているとします。"
"あなたがインストールするものは\"helloworld\"に依存しているものもあれば、そうでないものもあります。"

#: ../../user_guide.rst:138
msgid ""
"One way to ensure that the patched version is used consistently is to "
"manually audit the dependencies of everything you install, and if "
"\"helloworld\" is present, write a requirements file to use when "
"installing that thing."
msgstr ""
"パッチバージョンが一貫して使用されることを保証する1つの方法は、"
"インストールするすべての依存関係を手動で監査することです。"
"そして\"helloworld\"が存在する場合は、そのものをインストールするときに使用するrequirementsファイルを書きます。"

#: ../../user_guide.rst:142
msgid ""
"Constraints files offer a better way: write a single constraints file for"
" your organisation and use that everywhere. If the thing being installed "
"requires \"helloworld\" to be installed, your fixed version specified in "
"your constraints file will be used."
msgstr ""
"Constraintsファイルはより良い方法を提供します:"
"組織のための単一のconstraintsファイルを作成し、あらゆる場所で使用します。"
"インストールするものに\"helloworld\"をインストールする必要がある場合、"
"あなたのconstraintsファイルで指定された固定バージョンが使用されます。"

#: ../../user_guide.rst:147
msgid "Constraints file support was added in pip 7.1."
msgstr ""
"Constraintsファイルのサポートはpip7.1で追加されました。"

#: ../../user_guide.rst:152
msgid "Installing from Wheels"
msgstr ""
"Wheelsからインストール"

#: ../../user_guide.rst:154
msgid ""
"\"Wheel\" is a built, archive format that can greatly speed installation "
"compared to building and installing from source archives. For more "
"information, see the `Wheel docs <https://wheel.readthedocs.io>`_ , "
"`PEP427 <http://www.python.org/dev/peps/pep-0427>`_, and `PEP425 "
"<http://www.python.org/dev/peps/pep-0425>`_"
msgstr ""
"\"Wheel\"は、ソースアーカイブからのビルドやインストールと比較して、"
"インストールを大幅に高速化できるビルドされたアーカイブ形式です。"
"詳細は、`Wheel docs <https://wheel.readthedocs.io>`_ 、`PEP427 <http://www.python.org/dev/peps/pep-0427>`_、"
"および `PEP425 <http://www.python.org/dev/peps/pep-0425>`_ を参照してください。"

#: ../../user_guide.rst:160
msgid ""
"Pip prefers Wheels where they are available. To disable this, use the "
":ref:`--no-binary <install_--no-binary>` flag for :ref:`pip install`."
msgstr ""
"pipはWheelsが利用可能な環境を好みます。"
"これを無効にするには、:ref:`pip install` に :ref:`--no-binary <install_--no-binary>` フラグを使用して下さい。"

#: ../../user_guide.rst:163
msgid ""
"If no satisfactory wheels are found, pip will default to finding source "
"archives."
msgstr ""
"満足できるwheelsが見つからない場合、pipはデフォルトでソースアーカイブを検索します。"

#: ../../user_guide.rst:166
msgid "To install directly from a wheel archive:"
msgstr ""
"wheelアーカイブから直接インストールするには:"

#: ../../user_guide.rst:173
msgid ""
"For the cases where wheels are not available, pip offers :ref:`pip wheel`"
" as a convenience, to build wheels for all your requirements and "
"dependencies."
msgstr ""
"wheelsが利用できない場合、pipは利便性を高めるため :ref:`pip wheel` を勧め、"
"すべての要件と依存関係に対応するwheelsを構築します。"

#: ../../user_guide.rst:176
msgid ""
":ref:`pip wheel` requires the `wheel package "
"<https://pypi.python.org/pypi/wheel>`_ to be installed, which provides "
"the \"bdist_wheel\" setuptools extension that it uses."
msgstr ""
":ref:`pip wheel` は `wheel package <https://pypi.python.org/pypi/wheel>`_ が"
"インストールされている必要があります。"
"これはwheel packageが使用する \"bdist_wheel\" setuptoolsの拡張機能を提供します。"

#: ../../user_guide.rst:180
msgid ""
"To build wheels for your requirements and all their dependencies to a "
"local directory:"
msgstr ""
"要件とそのすべての依存関係のwheelsをローカルディレクトリに構築するには:"

#: ../../user_guide.rst:188
msgid ""
"And *then* to install those requirements just using your local directory "
"of wheels (and not from PyPI):"
msgstr ""
"*then*、wheelsのローカルディレクトリ（PyPIからではなく）を使用してこれらの要件をインストールします。"

#: ../../user_guide.rst:196
msgid "Uninstalling Packages"
msgstr ""
"パッケージのアンインストール"

#: ../../user_guide.rst:198
msgid "pip is able to uninstall most packages like so:"
msgstr ""
"pipは以下のようにほとんどのパッケージをアンインストールできます:"

#: ../../user_guide.rst:204
msgid ""
"pip also performs an automatic uninstall of an old version of a package "
"before upgrading to a newer version."
msgstr ""
"pipは、新しいバージョンにアップグレードする前に、古いバージョンのパッケージを自動的にアンインストールします。"

#: ../../user_guide.rst:207
msgid "For more information and examples, see the :ref:`pip uninstall` reference."
msgstr ""
"詳細と例については、:ref:`pip uninstall` のリファレンスを参照してください。"

#: ../../user_guide.rst:211
msgid "Listing Packages"
msgstr ""
"パッケージの一覧表示"

#: ../../user_guide.rst:213
msgid "To list installed packages:"
msgstr ""
"インストールされたパッケージを一覧表示するには:"

#: ../../user_guide.rst:223
msgid "To list outdated packages, and show the latest version available:"
msgstr ""
"古いパッケージを一覧表示し、最新のバージョンを表示するには:"

#: ../../user_guide.rst:232
msgid "To show details about an installed package:"
msgstr ""
"インストールされたパッケージの詳細を表示するには:"

#: ../../user_guide.rst:244
msgid ""
"For more information and examples, see the :ref:`pip list` and :ref:`pip "
"show` reference pages."
msgstr ""
"詳細および例については、:ref:`pip list` および :ref:`pip show` のリファレンスページを参照してください。"

#: ../../user_guide.rst:249
msgid "Searching for Packages"
msgstr ""
"パッケージの検索"

#: ../../user_guide.rst:251
msgid "pip can search `PyPI`_ for packages using the ``pip search`` command::"
msgstr ""
"pipは、``pip search`` コマンドを使用してパッケージの `PyPI`_ を検索できます:"

#: ../../user_guide.rst:256
msgid "The query will be used to search the names and summaries of all packages."
msgstr ""
"queryは、すべてのパッケージの名前とサマリーを検索するために使用されます。"

#: ../../user_guide.rst:259
msgid "For more information and examples, see the :ref:`pip search` reference."
msgstr ""
"詳細および例については、:ref:`pip search` のリファレンスを参照してください。"

#: ../../user_guide.rst:264
msgid "Configuration"
msgstr ""
"コンフィグレーション"

#: ../../user_guide.rst:269
msgid "Config file"
msgstr ""
"設定ファイル"

#: ../../user_guide.rst:271
msgid ""
"pip allows you to set all command line option defaults in a standard ini "
"style config file."
msgstr ""
"pipでは標準のiniスタイルの設定ファイルにすべてのコマンドラインオプションのデフォルトを設定することができます。"

#: ../../user_guide.rst:274
msgid ""
"The names and locations of the configuration files vary slightly across "
"platforms. You may have per-user, per-virtualenv or site-wide (shared "
"amongst all users) configuration:"
msgstr ""
"設定ファイルの名前と場所は、プラットフォームによって多少異なります。"
"ユーザー単位、vertualenv単位、またはサイト全体（すべてのユーザーで共有）の設定が可能です。"

#: ../../user_guide.rst:278
msgid "**Per-user**:"
msgstr ""
"**ユーザー単位**"

#: ../../user_guide.rst:280
msgid ""
"On Unix the default configuration file is: "
":file:`$HOME/.config/pip/pip.conf` which respects the ``XDG_CONFIG_HOME``"
" environment variable."
msgstr ""
"Unixでは、デフォルトの設定ファイルは、``XDG_CONFIG_HOME`` 環境変数を重んじる :file:`$HOME/.config/pip/pip.conf` です。"

#: ../../user_guide.rst:282
msgid ""
"On macOS the configuration file is :file:`$HOME/Library/Application "
"Support/pip/pip.conf`."
msgstr ""
"macOSでは、設定ファイルは :file:`$HOME/Library/Application Support/pip/pip.conf` です。"

#: ../../user_guide.rst:284
msgid "On Windows the configuration file is :file:`%APPDATA%\\\\pip\\\\pip.ini`."
msgstr ""
"Windowsでは、設定ファイルは :file:`%APPDATA%\\\\pip\\\\pip.ini` です。"

#: ../../user_guide.rst:286
msgid ""
"There are also a legacy per-user configuration file which is also "
"respected, these are located at:"
msgstr ""
"また、従来のユーザーごとの設定ファイルもありますがこれも尊重されています。"
"これらは以下の場所に位置します。"

#: ../../user_guide.rst:289
msgid "On Unix and macOS the configuration file is: :file:`$HOME/.pip/pip.conf`"
msgstr ""
"UnixやmacOSでは、設定ファイルは :file:`$HOME/.pip/pip.conf` です。"

#: ../../user_guide.rst:290
msgid "On Windows the configuration file is: :file:`%HOME%\\\\pip\\\\pip.ini`"
msgstr ""
"Windowsでは、設定ファイルは :file:`%HOME%\\\\pip\\\\pip.ini` です。"

#: ../../user_guide.rst:292
msgid ""
"You can set a custom path location for this config file using the "
"environment variable ``PIP_CONFIG_FILE``."
msgstr ""
"環境変数 ``PIP_CONFIG_FILE`` を使用して、この設定ファイルのカスタムパスの場所を設定できます。"

#: ../../user_guide.rst:295
msgid "**Inside a virtualenv**:"
msgstr ""
"**virtualenv内**"

#: ../../user_guide.rst:297
msgid "On Unix and macOS the file is :file:`$VIRTUAL_ENV/pip.conf`"
msgstr ""
"UnixとmacOSのファイルは :file:`$VIRTUAL_ENV/pip.conf` です。"

#: ../../user_guide.rst:298
msgid "On Windows the file is: :file:`%VIRTUAL_ENV%\\\\pip.ini`"
msgstr ""
"Windowsではファイルは :file:`%VIRTUAL_ENV%\\\\pip.ini` です。"

#: ../../user_guide.rst:300
msgid "**Site-wide**:"
msgstr ""
"**サイト全体**"

#: ../../user_guide.rst:302
msgid ""
"On Unix the file may be located in :file:`/etc/pip.conf`. Alternatively "
"it may be in a \"pip\" subdirectory of any of the paths set in the "
"environment variable ``XDG_CONFIG_DIRS`` (if it exists), for example "
":file:`/etc/xdg/pip/pip.conf`."
msgstr ""
"Unixでは、ファイルは :file:`/etc/pip.conf` にあります。"
"代わりに、:file:`/etc/xdg/pip/pip.conf` のように、環境変数 ``XDG_CONFIG_DIRS`` （存在する場合）に"
"設定されているパスのいずれかの \"pip\"サブディレクトリに存在する可能性があります。"

#: ../../user_guide.rst:306
msgid "On macOS the file is: :file:`/Library/Application Support/pip/pip.conf`"
msgstr ""
"macOSではファイルは :file:`/Library/Application Support/pip/pip.conf` です。"

#: ../../user_guide.rst:307
msgid ""
"On Windows XP the file is: :file:`C:\\\\Documents and Settings\\\\All "
"Users\\\\Application Data\\\\pip\\\\pip.ini`"
msgstr ""
"Windows XPの場合、ファイルは :file:`C:\\\\Documents and Settings\\\\All "
"Users\\\\Application Data\\\\pip\\\\pip.ini` です。"

#: ../../user_guide.rst:309
msgid ""
"On Windows 7 and later the file is hidden, but writeable at "
":file:`C:\\\\ProgramData\\\\pip\\\\pip.ini`"
msgstr ""
"Windows7以降では、ファイルは非表示になっていますが、"
":file:`C:\\\\ProgramData\\\\pip\\\\pip.ini` "
"に書き込むことができます"

#: ../../user_guide.rst:311
msgid "Site-wide configuration is not supported on Windows Vista"
msgstr ""
"サイト全体の設定はWindows Vistaではサポートされていません"

#: ../../user_guide.rst:313
msgid ""
"If multiple configuration files are found by pip then they are combined "
"in the following order:"
msgstr ""
"複数の設定ファイルがpipによって見つかった場合、それらは次の順序で結合されます"

#: ../../user_guide.rst:316
msgid "Firstly the site-wide file is read, then"
msgstr ""
"まずサイト全体のファイルを読み込み、次に"

#: ../../user_guide.rst:317
msgid "The per-user file is read, and finally"
msgstr ""
"ユーザーごとのファイルが読み込まれ、最後に"

#: ../../user_guide.rst:318
msgid "The virtualenv-specific file is read."
msgstr ""
"virtualenv固有のファイルが読み込まれます。"

#: ../../user_guide.rst:320
msgid ""
"Each file read overrides any values read from previous files, so if the "
"global timeout is specified in both the site-wide file and the per-user "
"file then the latter value is the one that will be used."
msgstr ""
"以前のファイルから読み取られた値は、読み込まれた各ファイルを上書きするので、"
"サイト全体のファイルとユーザー単位のファイルの両方でグローバルタイムアウトが指定されている場合は、"
"後者の値が使用されます。"

#: ../../user_guide.rst:324
msgid ""
"The names of the settings are derived from the long command line option, "
"e.g. if you want to use a different package index (``--index-url``) and "
"set the HTTP timeout (``--default-timeout``) to 60 seconds your config "
"file would look like this:"
msgstr ""
"設定の名前は長いコマンドラインのオプションから導かれます。"
"例えば、別のパッケージインデックス(``--index-url``)を使用し、"
"HTTPタイムアウト(``--default-timeout``)を60秒に設定すると、"
"設定ファイルは次のようになります"

#: ../../user_guide.rst:335
msgid ""
"Each subcommand can be configured optionally in its own section so that "
"every global setting with the same name will be overridden; e.g. "
"decreasing the ``timeout`` to ``10`` seconds when running the `freeze` "
"(`Freezing Requirements <./#freezing-requirements>`_) command and using "
"``60`` seconds for all other commands is possible with:"
msgstr ""
"各サブコマンドは、同じ名前ですべてのグローバル設定が上書きされるように、"
"オプションで独自のセクションで設定できます。"
"例えば、`freeze` (`Freezing Requirements <./#freezing-requirements>`_) コマンドを"
"実行しているときの ``timeout`` を ``10`` 秒に減らし、"
"他のすべてのコマンドは ``60`` 秒にすることも可能です:"

#: ../../user_guide.rst:350
msgid ""
"Boolean options like ``--ignore-installed`` or ``--no-dependencies`` can "
"be set like this:"
msgstr ""
"``--ignore-installed`` や ``--no-dependencies`` などのBooleanオプションは次のように設定できます:"

#: ../../user_guide.rst:359
msgid ""
"To enable the boolean options ``--no-compile`` and ``--no-cache-dir``, "
"falsy values have to be used:"
msgstr ""
"booleanオプション ``--no-compile`` と ``--no-cache-dir`` を有効にするには、"
"falsy値を使用する必要があります:"

#: ../../user_guide.rst:370
msgid "Appending options like ``--find-links`` can be written on multiple lines:"
msgstr ""
"``--find-links`` のようなオプションを複数行に書くことができます:"

#: ../../user_guide.rst:385
msgid "Environment Variables"
msgstr ""
"環境変数"

#: ../../user_guide.rst:387
msgid ""
"pip's command line options can be set with environment variables using "
"the format ``PIP_<UPPER_LONG_NAME>`` . Dashes (``-``) have to be replaced"
" with underscores (``_``)."
msgstr ""
"pipのコマンドラインオプションは、``PIP_<UPPER_LONG_NAME>`` の形式で環境変数を設定することができます。"
"ダッシュ(``-``)はアンダースコア(``_``)で置き換える必要があります。"

#: ../../user_guide.rst:391
msgid "For example, to set the default timeout::"
msgstr ""
"例えば、デフォルトのタイムアウトを設定するには、次のようにします::"

#: ../../user_guide.rst:395
msgid "This is the same as passing the option to pip directly::"
msgstr ""
"これはpipに直接オプションを渡すのと同じです::"

#: ../../user_guide.rst:399
msgid ""
"To set options that can be set multiple times on the command line, just "
"add spaces in between values. For example::"
msgstr ""
"コマンドラインで複数回設定できるオプションを設定するには、値の間にスペースを追加します。例えば::"

#: ../../user_guide.rst:404
msgid "is the same as calling::"
msgstr ""
"呼び出しと同じです::"

#: ../../user_guide.rst:410
msgid "Config Precedence"
msgstr ""
"設定の優先順位"

#: ../../user_guide.rst:412
msgid ""
"Command line options have precedence over environment variables, which "
"have precedence over the config file."
msgstr ""
"コマンドラインオプションは環境変数よりも優先されます。環境変数は設定ファイルよりも優先されます。"

#: ../../user_guide.rst:414
msgid ""
"Within the config file, command specific sections have precedence over "
"the global section."
msgstr ""
"設定ファイル内では、コマンド固有セクションがグローバルセクションよりも優先されます。"

#: ../../user_guide.rst:416
msgid "Examples:"
msgstr ""
"例:"

#: ../../user_guide.rst:418
msgid "``--host=foo`` overrides ``PIP_HOST=foo``"
msgstr ""
"``--host=foo`` は ``PIP_HOST=foo`` を上書きします。"

#: ../../user_guide.rst:419
msgid "``PIP_HOST=foo`` overrides a config file with ``[global] host = foo``"
msgstr ""
"``PIP_HOST=foo`` は ``[global] host = foo`` で設定ファイルを上書きします。"

#: ../../user_guide.rst:420
msgid ""
"A command specific section in the config file ``[<command>] host = bar`` "
"overrides the option with same name in the ``[global]`` config file "
"section"
msgstr ""
"設定ファイル ``[<command>] host = bar`` のコマンド固有のセクションは、"
"``[global]`` 設定ファイルセクションに同じ名前のオプションを上書きします。"

#: ../../user_guide.rst:425
msgid "Command Completion"
msgstr ""
"コマンドの完了"

#: ../../user_guide.rst:427
msgid "pip comes with support for command line completion in bash, zsh and fish."
msgstr ""
"pipは、bash、zsh、およびfishのコマンドライン補完をサポートしています。"

#: ../../user_guide.rst:429
msgid "To setup for bash::"
msgstr ""
"bashを設定するには::"

#: ../../user_guide.rst:433
msgid "To setup for zsh::"
msgstr ""
"zshを設定するには::"

#: ../../user_guide.rst:437
msgid "To setup for fish::"
msgstr ""
"fishの設定"

#: ../../user_guide.rst:441
msgid ""
"Alternatively, you can use the result of the ``completion`` command "
"directly with the eval function of your shell, e.g. by adding the "
"following to your startup file::"
msgstr ""
"あるいは、``completion`` コマンドの結果をシェルのeval関数で直接使用することもできます。"
"例えば、スタートアップファイルに以下を追加します::"

#: ../../user_guide.rst:451
msgid "Installing from local packages"
msgstr ""

#: ../../user_guide.rst:453
msgid ""
"In some cases, you may want to install from local packages only, with no "
"traffic to PyPI."
msgstr ""

#: ../../user_guide.rst:456
msgid "First, download the archives that fulfill your requirements::"
msgstr ""

#: ../../user_guide.rst:461
msgid ""
"Note that ``pip install --download`` will look in your wheel cache first,"
" before trying to download from PyPI.  If you've never installed your "
"requirements before, you won't have a wheel cache for those items.  In "
"that case, if some of your requirements don't come as wheels from PyPI, "
"and you want wheels, then run this instead::"
msgstr ""

#: ../../user_guide.rst:470
msgid ""
"Then, to install from local only, you'll be using :ref:`--find-links "
"<--find-links>` and :ref:`--no-index <--no-index>` like so::"
msgstr ""

#: ../../user_guide.rst:477
msgid "\"Only if needed\" Recursive Upgrade"
msgstr ""

#: ../../user_guide.rst:479
msgid ""
"``pip install --upgrade`` is currently written to perform an eager "
"recursive upgrade, i.e. it upgrades all dependencies regardless of "
"whether they still satisfy the new parent requirements."
msgstr ""

#: ../../user_guide.rst:483
msgid "E.g. supposing:"
msgstr ""

#: ../../user_guide.rst:485
msgid "`SomePackage-1.0` requires `AnotherPackage>=1.0`"
msgstr ""

#: ../../user_guide.rst:486
msgid "`SomePackage-2.0` requires `AnotherPackage>=1.0` and `OneMorePackage==1.0`"
msgstr ""

#: ../../user_guide.rst:487
msgid "`SomePackage-1.0` and `AnotherPackage-1.0` are currently installed"
msgstr ""

#: ../../user_guide.rst:488
msgid ""
"`SomePackage-2.0` and `AnotherPackage-2.0` are the latest versions "
"available on PyPI."
msgstr ""

#: ../../user_guide.rst:490
msgid ""
"Running ``pip install --upgrade SomePackage`` would upgrade `SomePackage`"
" *and* `AnotherPackage` despite `AnotherPackage` already being satisfied."
msgstr ""

#: ../../user_guide.rst:493
msgid ""
"pip doesn't currently have an option to do an \"only if needed\" "
"recursive upgrade, but you can achieve it using these 2 steps::"
msgstr ""

#: ../../user_guide.rst:499
msgid ""
"The first line will upgrade `SomePackage`, but not dependencies like "
"`AnotherPackage`.  The 2nd line will fill in new dependencies like "
"`OneMorePackage`."
msgstr ""

#: ../../user_guide.rst:503
msgid ""
"See :issue:`59` for a plan of making \"only if needed\" recursive the "
"default behavior for a new ``pip upgrade`` command."
msgstr ""

#: ../../user_guide.rst:508
msgid "User Installs"
msgstr ""

#: ../../user_guide.rst:510
msgid ""
"With Python 2.6 came the `\"user scheme\" for installation "
"<http://docs.python.org/install/index.html#alternate-installation-the-"
"user-scheme>`_, which means that all Python distributions support an "
"alternative install location that is specific to a user.  The default "
"location for each OS is explained in the python documentation for the "
"`site.USER_BASE "
"<http://docs.python.org/library/site.html#site.USER_BASE>`_ variable.  "
"This mode of installation can be turned on by specifying the :ref:`--user"
" <install_--user>` option to ``pip install``."
msgstr ""

#: ../../user_guide.rst:519
msgid ""
"Moreover, the \"user scheme\" can be customized by setting the "
"``PYTHONUSERBASE`` environment variable, which updates the value of "
"``site.USER_BASE``."
msgstr ""

#: ../../user_guide.rst:522
msgid ""
"To install \"SomePackage\" into an environment with site.USER_BASE "
"customized to '/myappenv', do the following::"
msgstr ""

#: ../../user_guide.rst:528
msgid "``pip install --user`` follows four rules:"
msgstr ""

#: ../../user_guide.rst:530
msgid ""
"When globally installed packages are on the python path, and they "
"*conflict* with the installation requirements, they are ignored, and "
"*not* uninstalled."
msgstr ""

#: ../../user_guide.rst:533
msgid ""
"When globally installed packages are on the python path, and they "
"*satisfy* the installation requirements, pip does nothing, and reports "
"that requirement is satisfied (similar to how global packages can satisfy"
" requirements when installing packages in a ``--system-site-packages`` "
"virtualenv)."
msgstr ""

#: ../../user_guide.rst:538
msgid ""
"pip will not perform a ``--user`` install in a ``--no-site-packages`` "
"virtualenv (i.e. the default kind of virtualenv), due to the user site "
"not being on the python path.  The installation would be pointless."
msgstr ""

#: ../../user_guide.rst:541
msgid ""
"In a ``--system-site-packages`` virtualenv, pip will not install a "
"package that conflicts with a package in the virtualenv site-packages.  "
"The --user installation would lack sys.path precedence and be pointless."
msgstr ""

#: ../../user_guide.rst:546
msgid "To make the rules clearer, here are some examples:"
msgstr ""

#: ../../user_guide.rst:549
msgid "From within a ``--no-site-packages`` virtualenv (i.e. the default kind)::"
msgstr ""

#: ../../user_guide.rst:555
msgid ""
"From within a ``--system-site-packages`` virtualenv where "
"``SomePackage==0.3`` is already installed in the virtualenv::"
msgstr ""

#: ../../user_guide.rst:561
msgid ""
"From within a real python, where ``SomePackage`` is *not* installed "
"globally::"
msgstr ""

#: ../../user_guide.rst:568
msgid ""
"From within a real python, where ``SomePackage`` *is* installed globally,"
" but is *not* the latest version::"
msgstr ""

#: ../../user_guide.rst:579
msgid ""
"From within a real python, where ``SomePackage`` *is* installed globally,"
" and is the latest version::"
msgstr ""

#: ../../user_guide.rst:598
msgid "Ensuring Repeatability"
msgstr ""

#: ../../user_guide.rst:600
msgid "pip can achieve various levels of repeatability:"
msgstr ""

#: ../../user_guide.rst:603
msgid "Pinned Version Numbers"
msgstr ""

#: ../../user_guide.rst:605
msgid ""
"Pinning the versions of your dependencies in the requirements file "
"protects you from bugs or incompatibilities in newly released versions::"
msgstr ""

#: ../../user_guide.rst:611
msgid ""
"Using :ref:`pip freeze` to generate the requirements file will ensure "
"that not only the top-level dependencies are included but their sub-"
"dependencies as well, and so on. Perform the installation using :ref"
":`--no-deps <install_--no-deps>` for an extra dose of insurance against "
"installing anything not explicitly listed."
msgstr ""

#: ../../user_guide.rst:617
msgid ""
"This strategy is easy to implement and works across OSes and "
"architectures. However, it trusts PyPI and the certificate authority "
"chain. It also relies on indices and find-links locations not allowing "
"packages to change without a version increase. (PyPI does protect against"
" this.)"
msgstr ""

#: ../../user_guide.rst:624
msgid "Hash-checking Mode"
msgstr ""

#: ../../user_guide.rst:626
msgid ""
"Beyond pinning version numbers, you can add hashes against which to "
"verify downloaded packages::"
msgstr ""

#: ../../user_guide.rst:631
msgid ""
"This protects against a compromise of PyPI or the HTTPS certificate "
"chain. It also guards against a package changing without its version "
"number changing (on indexes that allow this). This approach is a good fit"
" for automated server deployments."
msgstr ""

#: ../../user_guide.rst:636
msgid ""
"Hash-checking mode is a labor-saving alternative to running a private "
"index server containing approved packages: it removes the need to upload "
"packages, maintain ACLs, and keep an audit trail (which a VCS gives you "
"on the requirements file for free). It can also substitute for a vendor "
"library, providing easier upgrades and less VCS noise. It does not, of "
"course, provide the availability benefits of a private index or a vendor "
"library."
msgstr ""

#: ../../user_guide.rst:643
msgid ""
"For more, see :ref:`pip install\\'s discussion of hash-checking mode "
"<hash-checking mode>`."
msgstr ""

#: ../../user_guide.rst:648
msgid "Installation Bundles"
msgstr ""

#: ../../user_guide.rst:650
msgid ""
"Using :ref:`pip wheel`, you can bundle up all of a project's "
"dependencies, with any compilation done, into a single archive. This "
"allows installation when index servers are unavailable and avoids time-"
"consuming recompilation. Create an archive like this::"
msgstr ""

#: ../../user_guide.rst:660
msgid "You can then install from the archive like this::"
msgstr ""

#: ../../user_guide.rst:666
msgid ""
"Note that compiled packages are typically OS- and architecture-specific, "
"so these archives are not necessarily portable across machines."
msgstr ""

#: ../../user_guide.rst:669
msgid ""
"Hash-checking mode can be used along with this method to ensure that "
"future archives are built with identical packages."
msgstr ""

#: ../../user_guide.rst:673
msgid ""
"Finally, beware of the ``setup_requires`` keyword arg in "
":file:`setup.py`. The (rare) packages that use it will cause those "
"dependencies to be downloaded by setuptools directly, skipping pip's "
"protections. If you need to use such a package, see :ref:`Controlling "
"setup_requires<controlling-setup-requires>`."
msgstr ""

